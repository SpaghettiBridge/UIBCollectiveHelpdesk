id: '17163015320360.08110732432047918'
definitionId: smartTable
parentSlotId: '17152448971770.540481335972298'
styles:
  xl:
    gridItem:
      x: 0
      y: 19
      w: 24
      h: 46
    flex:
      size:
        widthValue: 500
        widthUnit: px
        heightValue: 320
        heightUnit: px
      grow: '0'
      shrink: '0'
  xs:
    gridItem:
      x: 0
      y: 1221
      w: 24
      h: 29
    flex:
      size:
        widthValue: 500
        widthUnit: px
        heightValue: 320
        heightUnit: px
      grow: '0'
      shrink: '0'
properties:
  dynamicColumns:
    value: []
    dataValue: |-
      [
        {
          "prop": "id",
          "type": "number",
          "primaryKey": true
        },
        "name",
        {
          "prop": "avatar",
          "type": "image"
        },
        {
          "prop": "email",
          "type": "link"
        }
      ]
    withData: false
  data: "// Create an object to store the filter conditions\nvar filters = {};\n\n// Check if 'ui' exists and use destructuring to extract required properties\nif (ui) {\n  const {\n    flt_type,\n    flt_priority,\n    flt_ticket_num,\n\t\tflt_services,\n    flt_status,\n    flt_queue,\n  } = ui;\n\n  // Reduce the filter conditions into the 'filters' object\n  const filterConditions = [\n    { key: \"ticket_type_id\", value: flt_type?.value },\n    { key: \"priority\", value: flt_priority?.value },\n    { key: \"ticket_number\", value: flt_ticket_num?.value },\n  { key: \"service_id\", value: flt_services?.value },\n  { key: \"fk_status_id\", value: flt_status?.value },\n    { key: \"assigned_queue\", value: flt_queue?.value },\n  ];\n\n  console.log(filterConditions);\n\n  \n  filters = filterConditions.reduce((result, condition) => {\n    if (condition.value !== undefined && condition.value !== null && condition.value !== \"\" && condition.value.length != 0) {\n      result[condition.key] = condition.value;\n    }\n    return result;\n  }, {});\n}\n\nconsole.log(filters)\n// Apply the filters and map the results\nlet output = [];\nlet inputData = []\nif(ui.chk_all_tickets.value){\ninputData =  actions.get_All_tickets\n}else {\ninputData = actions.get_My_tickets\n}\nif (actions && inputData && inputData.data !== null) {\n  output = inputData.data\n    .sort((a, b) => new Date(a.due_date).getTime() - new Date(b.due_date).getTime())\n    .filter((c) => {\n      for (const key in filters) {\n        if (Array.isArray(filters[key])) {\n          if (!filters[key].includes(c[key])) {\n            return false;\n          }\n        } else {\n          if (c[key] !== filters[key]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    });\n}\n\nreturn output;\n"
  name: tbl_mainTickets
  __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
    - xl
    - xs
  title: ''
  showLoading:
    withData: true
    dataValue: '{{actions.get_My_tickets.loading}}'
    value: false
  containerStyles:
    withData: false
    dataValue: |-
      {
        padding: 'default',
        shadow: 'default',
        border: 'default'
      }
    value:
      padding: none
      shadow: none
      border: none
  heightMode: auto
  rowHeight: dynamic
  showFooter:
    value: true
    dataValue: 'true'
    withData: false
  sortColumn:
    value: ticket_number
    dataValue: ''
    withData: false
  sortDirection:
    value: asc
    dataValue: asc
    withData: false
  limit: '50'
  showBulkEditAction:
    value: true
    dataValue: '{{state.user_type != "User"}}'
    withData: true
  showFilter: false
  multiplyRowSelection:
    value: true
    dataValue: '{{ui.tbl_mainTickets.isBulkEditingOpen}}'
    withData: true
  rowSelectionType:
    value: checkbox
    dataValue: row
    withData: false
  sortable:
    value: false
    dataValue: 'true'
    withData: false
actions:
  uiOnRowDoubleClick:
    - action: '17158492966490.31101718163823167'
      paramCode: ''
      blockPageLoad: false
      preventDefault: false
      index: 0
    - action: '17165389140600.7685731629406327'
      paramCode: ''
      blockPageLoad: false
      preventDefault: false
      index: 1
    - action: '17165567040060.39781109585737817'
      paramCode: ''
      blockPageLoad: false
      preventDefault: false
      index: 2
    - action: '17165567055800.8515563080232058'
      paramCode: ''
      blockPageLoad: false
      preventDefault: false
      index: 3
  init: []
  smartTableCreate: []
  smartTableEdit: []
  smartTableBulkEdit:
    - action: '17182715892620.7200858866938806'
      paramCode: ''
      index: 4
  smartTableDelete: []
  smartTableRowSelect: []
  smartTableRowClick: []
  smartTablePageSelect: []
  uiOnPageSizeChange: []
  smartTableFilterChange: []
  smartTableSortChange: []
  smartTableReload: []
  uiOnCellChangeTrigger: []
slots:
  - id: '17163015320360.8319390737963326'
    name: columns
    children:
      - id: '17163026452170.2713539100177933'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicString3
          prop: service_name
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 48
          widthMode: fixed
          filter: true
          title: Service
          forceView: true
        index: 2
        actions: {}
        slots: []
      - id: '17163026452180.1280324827964694'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString5
          prop: links
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 10
        slots: []
      - id: '17163026452180.9901020485991534'
        definitionId: atomicText
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicText2
          prop: details
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 200
          widthMode: auto
          filter: true
          forceView: true
        index: 4
        slots: []
      - id: '17163026452180.8346498050270661'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicString6
          prop: title
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
          forceView: true
        index: 3
        slots: []
      - id: '17163026452180.7024203068813972'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString7
          prop: urgency
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 11
        slots: []
      - id: '17163026452180.09458345095641207'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString8
          prop: importance
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 12
        slots: []
      - id: '17163026452180.5932567400026745'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString9
          prop: assigned_queue
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 13
        slots: []
      - id: '17163026452180.0625955611161999'
        definitionId: atomicDateTime
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicDateTime2
          prop: entered_date
          primaryKey: false
          timeFormat:
            value: ''
            dataValue: HH:mm
            withData: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 88
          widthMode: fixed
          filter: true
          dateFormat:
            value: MMM dd, yyyy
            dataValue: dd/MM/yyyy
            withData: true
          forceView: true
          title: Created Date
        index: 6
        actions: {}
        slots: []
      - id: '17163026452180.6134199004150653'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicString10
          prop: creator
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 130
          widthMode: fixed
          filter: true
          forceView: true
        index: 8
        actions: {}
        slots: []
      - id: '17163026452180.022588425441705917'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString13
          prop: app_name
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 14
        slots: []
      - id: '17163026452180.4587364586727587'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString26
          prop: category
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 15
        slots: []
      - id: '17163026452180.5644152019415414'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString27
          prop: subcategory
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 16
        slots: []
      - id: '17163026452180.27440162150945846'
        definitionId: atomicJsonEditor
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicJsonEditor
          prop: external_thread
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 17
        slots: []
      - id: '17163026452180.7237120191711555'
        definitionId: atomicJsonEditor
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicJsonEditor2
          prop: internal_thread
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          width: 120
          widthMode: auto
          filter: true
        index: 18
        slots: []
      - id: '17163030838520.046131385580348905'
        definitionId: atomicNumber
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicNumber
          prop: ticket_number
          primaryKey: false
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          title: ' '
          width: '45'
          widthMode: fixed
          forceView: true
        index: 0
        slots: []
      - id: '17182030608880.723389945739974'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: false
        properties:
          name: atomicString14
          prop: id
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          primaryKey: true
        index: 19
        slots: []
      - id: '17163026452170.16610953810105666'
        definitionId: atomicSelect
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicSelect8
          prop: priority
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          primaryKey: false
          filter: true
          widthMode: fixed
          width: 76
          options:
            value:
              - value: High
                color: danger
                __UIBAKERY__SYSTEM_ID__: '17182708576920.7074331747074447'
              - value: Medium
                color: warning
                __UIBAKERY__SYSTEM_ID__: '17182708576920.6283223882097859'
              - value: Low
                color: success-light
                __UIBAKERY__SYSTEM_ID__: '17182708576920.6020020916461033'
              - value: Very Low
                color: basic
                __UIBAKERY__SYSTEM_ID__: '17182708576920.17206228840433435'
            dataValue: |-
              [
                {
                  value: 'High',
                  color: 'primary'
                },
                {
                  value: 'Medium',
                  color: 'success'
                },
                {
                  value: 'Low',
                  color: 'warning'
                },
                {
                  value: 'Very Low',
                  color: 'danger'
                }
              ]
            withData: false
          allowResetValue:
            value: false
            dataValue: 'true'
            withData: false
        index: 1
        actions: {}
        slots: []
      - id: '17163026452180.3304359036551521'
        definitionId: atomicSelect
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicSelect
          prop: fk_status_id
          primaryKey: false
          options:
            value:
              - value: 5992f1c3-5754-4264-a0bf-2b58a311126a
                color: primary
                __UIBAKERY__SYSTEM_ID__: '17182731509640.4403080346925283'
            dataValue: >-
              {{actions.get_ticket_statuses.data.map(item=> {return{title:
              item.name, value:item.id} })}}
            withData: true
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          filter: true
          widthMode: fixed
          width: 119
          title: Status
        index: 7
        actions: {}
        slots: []
      - id: '17163026452180.1371186303377585'
        definitionId: atomicSelect
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicSelect5
          prop: fk_type_id
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          title: Type
          primaryKey: false
          filter: true
          widthMode: auto
          width: 120
          options:
            value:
              - value: 2561c2c9-9ae4-4788-8282-5f3f70f7fd29
                color: primary
                __UIBAKERY__SYSTEM_ID__: '17182734180310.18805946836037402'
              - value: 0a09527f-465c-4436-ba62-c33d885526ef
                color: success
                __UIBAKERY__SYSTEM_ID__: '17182734180310.9872437299895751'
              - value: 5bf70834-f4e0-4216-9101-907b90149215
                color: warning
                __UIBAKERY__SYSTEM_ID__: '17182734180310.4922049877239376'
            dataValue: >-
              {{actions.get_ticket_types.data.map(item=> {return{title:
              item.name, value:item.id} })}}
            withData: true
        index: 5
        slots: []
      - id: '17163026452180.06508430771490081'
        definitionId: atomicSelect
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            visible: true
        properties:
          name: atomicSelect9
          prop: fk_agent_id
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          primaryKey: false
          filter: true
          widthMode: fixed
          width: 198
          options:
            value:
              - value: b1b36630-9ca8-414e-8a21-d6d522d3fb81
                color: primary
                __UIBAKERY__SYSTEM_ID__: '17182734613830.6119593865542223'
            dataValue: >-
              {{actions.get_accounts.data.filter(x=> x.service_id ==
              row.service_id).map(item=> {return{title: item.name,
              value:item.id} })}}
            withData: true
          title: Agent
        index: 9
        actions: {}
        slots: []
      - id: '17182758058750.5499953681010898'
        definitionId: atomicString
        parentSlotId: '17163015320360.8319390737963326'
        styles:
          xl:
            color:
              value: basic
              dataValue: |-


                {{value != state.AccountData.account_id ? 'green' : 'red'}}
              withData: true
        properties:
          name: atomicString12
          prop: fk_awaiting_response
          __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
            - xl
            - xs
          mappedValue: |-
            {{
            if(value != state.AccountData.account_id){
            return "✔"
            }
            return "✘"
            }}
          title: ' replied?'
          width: '30'
          textStyle:
            transform: none
            styles: []
          forceView: true
          alignment: center
        index: 20
        slots: []
